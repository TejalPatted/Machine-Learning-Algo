# -*- coding: utf-8 -*-
"""
Created on Thu Feb 16 14:12:44 2017

@author: Tejal
"""

import random as rd
          
# Assign random centroids
def int_centroid():
    init_centroidlist = []
    for i in range(k):
        init_centroidlist.append(rd.choice(mainlist))
    return (init_centroidlist)   


# calculated the distance between the centroid and the input_points
def cal_distance(input_centroid,input_list):
    temp2=[]
    l=[]
    new_list=[]
    for i in input_list:
        for j in input_centroid:
            x=((i[0]-j[0])**2)
            y=((i[1]-j[1])**2)              
            temp2.append(x+y) # calculated the distance between the centroid and the mainlist. 
        l.append(temp2) #the first element in the list distance is calculated first and so on
        temp2=[]

# Use the 'k' distances b/w each point and 'k' clustercentroids to 
# assign cluster to each pt based on min distance
    for i in l:
        new_list.append(i.index(min(i)))
    return new_list    

# Recalculate the centroids 
def recal_centroid(list_indi,input_list): 
    l =[]
    mid_centroid1 =[]
    for i in range(k):
        l = [x for j,x in enumerate(input_list) if list_indi[j] == i]
        avg_x = sum(zip(*l)[0])/len(l)
        avg_y = sum(zip(*l)[1])/len(l)        
        mid_centroid1.append([avg_x,avg_y])
    return(mid_centroid1)


f_path = raw_input('Enter datafile path:')
data = open(f_path)

k =3
c1 = []
c2 =[]
c3=[]

# Read data into list
mainlist=[list(map(float,x.split(","))) for x in data]
prev_cen = []    
for j in range(70):
    if(j==0):
        center=int_centroid()
    dis=cal_distance(center,mainlist)
    return_centroid=recal_centroid(dis,mainlist)
    center=return_centroid
    if(return_centroid==prev_cen):
        break
    else:
        prev_cen=return_centroid

print('The points converge at centroids',return_centroid)
