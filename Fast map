# -*- coding: utf-8 -*-
"""
Created on Sun Feb 26 14:44:02 2017

@author: Tejal
"""

import numpy as np
import math

def fastmap(k,data):
    global X
    global col_num
    if(k<=0):
        return
    col_num +=1

# Choose pivot points    
    pivots = choose_pivots(data)
    data_pts = data[:,[0,1]]
# Get the index of row containing pivot points to find the dstance associted with it
    ind = np.where(np.all(data_pts==pivots,axis=1))[0][0]

# If distance between pivot points is zero, assign the co-ordinate value as 0 for all points
    if(data[ind,2]==0):
        for i in range(len(unique_datapts)):
            X[i,col_num]==0
            return

# Project objects on line created by pivot points
    for i in range(len(unique_datapts)):
# Distance of Oa = 0        
        if( unique_datapts[i] == pivots[0]):
            X[i,col_num] = 0
        
# Distance of Ob = Dab
        elif (unique_datapts[i] == pivots[1]):
            X[i,col_num] = data[np.where(np.all(data_pts==pivots,axis=1))[0][0],2]

# For points other than pivot points   
        else:         
            # Distance from Oa to each point, if pt is greater than Oa (pt=9, Oa =1)
            # distance is not mentioned in table, hence we take points in reverse
            dai = np.where(np.all(data_pts==[pivots[0],unique_datapts[i]],axis=1))[0]
            if dai.size == 0:
                dai = np.where(np.all(data_pts==[unique_datapts[i],pivots[0]],axis=1))[0]
            dai = data[dai[0],2] 
            dbi = np.where(np.all(data_pts==[pivots[1],unique_datapts[i]],axis=1))[0]       
            if dbi.size == 0:                       
                dbi = np.where(np.all(data_pts==[unique_datapts[i],pivots[1]],axis=1))[0]
            dbi = data[dbi[0],2]
            dab = data[np.where(np.all(data_pts==pivots,axis=1))[0][0],2]
            # The co-ordinate of the ith point
            xi = (dai**2+dab**2-dbi**2)/(2*dab)
            X[i,col_num] = xi

# Find the new distance between the objects
    for j,i in enumerate(data):
        newDis = math.sqrt( abs(i[2]**2-(X[int(i[0]-1),col_num]-X[int(i[1]-1),col_num])**2 ))
        data[j][2]=newDis
    k = k-1
    
# Recurse for new set of distance to get other co-ordinate values
    fastmap(k,data)


def choose_pivots(data):
#    Get the maximum distnace among all values present in column 3
    max_dist = max(list(data[:,2]))
    subset = data[np.where(data[:,2]==max_dist)]
    subset = subset[np.lexsort((subset[:,0],subset[:,1]))]
    pivots = [subset[0][0],subset[0][1]]
    return(pivots)
    

file_path = raw_input("Enter file path : ")
#in_data = np.genfromtxt('C:\Users\Tejal\Documents\Tejal\College\INF552\HW3\Fastmap_data.csv',delimiter=',')
in_data = np.genfromtxt(file_path,delimiter=',')
dim = 2
col_num = -1
# Get the data points 
unique_datapts = list(set(list(list(in_data[:,0])+list(in_data[:,1]))))
# Output array 
X = np.empty([len(unique_datapts),dim])
fastmap(dim,in_data)

# Print the 2D coordinates of all points
print("The %dD coordinates of the points printed row-wise--"%dim)
print (X)
